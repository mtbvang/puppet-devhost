<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Build, dist/package and deploy VIM hosted and server editions. 
  This is an initial straight port of the existing Makefile process.
  -->

<project name="mtbvang-devhost" default="default" phingVersion="2.7.0" description="Test and build the puppet module. Note all test related targets need to be run from within the vagrant virtual machine.">

	<property environment="env" />
	<property name="build.dir" value="${project.basedir}" />

	<property name="image.version" value="14.04" />
	<property name="image.name" value="ubuntu-vagrant" />

	<property name="option.localtime" value="/usr/share/zoneinfo/Europe/Copenhagen" />

	<property name="test.pass.code" value="0" />

	<target name="default" description="Prints out available targets in this project.">
		<exec command="phing -l" passthru="true" />
		<echo msg="testing=${testing}" />
	</target>

	<target name="build-init" description="Initialization tasks">
		<mkdir dir="build" />
		<available file="build/modules" type="dir" property="modules.exists" />
	</target>

	<target name="build-clean" description="Removes the build dir.">
		<delete dir="build" />
	</target>

	<target name="test-bootstrap" depends="build-init" description="Downloads the boostrap script from github and runs it in the build directory.">
		<exec command="curl -O https://raw.githubusercontent.com/mtbvang/devhost/master/bootstrap.sh" dir="build" passthru="false" />
		<exec command="chmod +x bootstrap.sh" dir="build" passthru="false" />
		<exec command="sudo ./bootstrap.sh" dir="build" passthru="true" />
	</target>

	<target name="test-bootstrap-local" depends="build-init" description="Runs the boostrap script from with the local parameter which uses the local files instead of github.">
		<exec command="sudo ./bootstrap.sh local" dir="." passthru="true" />
	</target>

	<!-- Smoke test targets -->
	<property name="option.puppet.options" value="--verbose" />
	<property name="option.module.path" value="build/modules" />
	<property name="option.test.manifest" value="tests/init.pp" />
	<property name="option.apply.manifest" value="manifests/site.pp" />


	<property name="test.command" value="sudo puppet apply ${option.puppet.options} --modulepath=${option.module.path} ${option.test.manifest} " />
	<echo message="test.command: ${test.command}" />
	<property name="apply.command" value="sudo puppet apply ${option.puppet.options} --modulepath=${option.module.path} ${option.apply.manifest} " />
	<echo message="apply.command: ${apply.command}" />

	<target name="clean-test-smoke">
		<delete file="build/test-smoke.stdout" />
		<delete file="build/test-smoke.error" />
	</target>

	<target name="test-smoke" depends="build-init, librarian-puppet-install" description="Tests the localdev class in for Ubuntu Trusty">
		<exec passthru="false" checkreturn="true" returnProperty="test.result" outputProperty="test.output" output="build/test-smoke.stdout" error="build/test-smoke.error" command="${test.command} " />
		<echo msg="test.output=${test.output}" />
		<echo msg="test.result=${test.result}" />
		<phingcall target="test-check-result">
			<property name="test.result" value="${test.result}" />
		</phingcall>
	</target>

	<target name="puppet-apply-localdev" depends="build-init, librarian-puppet-install" description="Apply the localdev class to the machine">
		<exec passthru="false" checkreturn="true" output="build/puppet-apply-localdev-ubuntutrusty.stdout" error="build/puppet-apply-localdev-ubuntutrusty.error" command="${apply.command} " />
	</target>

	<target name="test-parse-logs">
		<exec command="grep 'Error:' build/test-smoke.stdout" outputProperty="grep.stdout.log" />
		<exec command="grep 'Error:' build/test-smoke.error" outputProperty="grep.error.log" />
	</target>

	<target name="test-check-result" depends="test-parse-logs">
		<property name="empty.string" value="" />
		<if>
			<and>
				<equals arg1="${test.result}" arg2="${test.pass.code}" />
				<equals arg1="${grep.error.log}" arg2="${empty.string}" />
				<equals arg1="${grep.stdout.log}" arg2="${empty.string}" />
			</and>
			<then>
				<echo message="Test passed." />
			</then>
			<else>
				<fail message="Test failed with code ${test.result}." />
				<echo msg="grep.stdout.log=${grep.stdout.log}" />
				<echo msg="grep.error.log=${grep.error.log}" />
			</else>
		</if>
	</target>

	<target name="librarian-puppet-update" depends="build-init" description="Runs librarian-puppet update. Only runs if option.modules.update property is set to any value e.g. -Doption.modules.update=true.">
		<exec passthru="true" command="librarian-puppet update --verbose" />
	</target>

	<target name="librarian-puppet-install" unless="modules.exists" depends="build-init" description="Runs librarian-puppet install">
		<exec passthru="true" command="librarian-puppet install --path=build/modules --verbose" />
	</target>


	<!-- Vagrant related targets -->

	<target name="vagrant-up-all" depends="vagrant-up" description="Starts all machines in the correct order." />

	<target name="vagrant-halt-all" description="Halts all machines in the correct order.">
		<exec command="vagrant halt testing" passthru="true" />
	</target>

	<target name="vagrant-rebuild-all" depends="vagrant-rebuild" description="Rebuilds all machines in the correct order." />

	<target name="vagrant-destroy-all" depends="vagrant-destroy" description="Destroys all machines in the correct order." />

	<target name="vagrant-reload-all" description="Restarts all machines in the correct order.">
		<exec command="vagrant reload dev" passthru="true" />
	</target>

	<target name="vagrant-rebuild" depends="vagrant-destroy, 
		vagrant-up" description="Vagrant destroy and up of dev testing machine." />

	<target name="vagrant-destroy" description="Vagrant destroy the dev testing machine.">
		<exec command="vagrant destroy -f dev" passthru="true" />
	</target>

	<target name="vagrant-up" description="Vagrant up the dev testing machine.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant up dev --provider=virtualbox --provision" passthru="true" />
	</target>

	<target name="vagrant-provision" description="Vagrant up the dev testing machine.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant provision" passthru="true" />
	</target>

	<target name="vagrant-export-ssh-config" depends="build-init" description="Dumps the vagrant ssh configs to ssh-config file.">
		<exec command="vagrant ssh-config > build/vagrant-ssh" passthru="true" />
	</target>

	<!-- Docker related targets -->

	<target name="docker-inspect" description="Gets the specified attribute value for the specified container. A container id or name must be passed in using option.container.id argument and a formate string e.g. .NetworkSettings.IPAddress using option.inspect.format argument.">
		<exec command="docker inspect --format '{{ ${option.inspect.format} }}' ${option.container.id}" passthru="true" />
	</target>

	<target name="docker-container-ip" description="Gets the IP for the specified container. A container id must be passed in using option.container.id argument.">
		<exec command="docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${option.container.id}" passthru="true" />
	</target>

</project>
